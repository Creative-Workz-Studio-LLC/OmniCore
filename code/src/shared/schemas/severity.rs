use serde::{Serialize, Deserialize};

/// ==============================
/// ðŸ“Š Severity Scale Definitions
/// ==============================
///
/// These enums define all available severity scoring systems for log entries.
/// Each scale is **degrading**, starting from 100 and decreasing based on alignment loss.
/// These are used to calculate severity based on an `alignment_score`, which ranges from 0 to 100.
///
/// ðŸ“Œ NOTE:
/// - These are not mutually exclusive. A single log entry may utilize multiple scales
///   depending on its type and diagnostic context.
/// - Trigger thresholds may be customized later to allow fine-tuned behavior.

/// ------------------------------
/// Base 10 â€” Standard Scale (10 levels)
/// ------------------------------
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub enum SeverityBase10 {
    Perfect,      // 100â€“91
    Excellent,    // 90â€“81
    Good,         // 80â€“71
    Fair,         // 70â€“61
    Caution,      // 60â€“51
    Risky,        // 50â€“41
    Degraded,     // 40â€“31
    Failing,      // 30â€“21
    Critical,     // 20â€“11
    Fatal,        // 10â€“0
}

/// ------------------------------
/// Base 5 â€” Precision Scale (20 levels)
/// ------------------------------
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub enum SeverityBase5 {
    Perfect,      // 100â€“96
    NearPerfect,  // 95â€“91
    Excellent,    // 90â€“86
    Strong,       // 85â€“81
    Stable,       // 80â€“76
    Balanced,     // 75â€“71
    Watchful,     // 70â€“66
    Drifting,     // 65â€“61
    Wavering,     // 60â€“56
    Exposed,      // 55â€“51
    Warning,      // 50â€“46
    Tense,        // 45â€“41
    Unstable,     // 40â€“36
    Fragile,      // 35â€“31
    Slipping,     // 30â€“26
    Dangerous,    // 25â€“21
    Severe,       // 20â€“16
    Collapsing,   // 15â€“11
    Critical,     // 10â€“6
    Fatal,        // 5â€“0
}

/// ------------------------------
/// Base 20 â€” Milestone Scale (5 levels)
/// ------------------------------
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub enum SeverityBase20 {
    Perfect,   // 100â€“81
    Stable,    // 80â€“61
    Unstable,  // 60â€“41
    Critical,  // 40â€“21
    Fatal,     // 20â€“0
}

/// ------------------------------
/// Base 25 â€” Anchor Scale (4 levels)
/// ------------------------------
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub enum SeverityBase25 {
    AnchorPerfect,  // 100â€“76
    AnchorStable,   // 75â€“51
    AnchorFailing,  // 50â€“26
    AnchorFatal,    // 25â€“0
}

/// ------------------------------
/// Base 50 â€” Binary Pass/Fail Scale (3 levels)
/// ------------------------------
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub enum SeverityBase50 {
    Pass,     // 100â€“51
    Warning,  // 50â€“1
    Fail,     // 0
}

impl SeverityBase10 {
    pub fn derive_from(score: u8) -> Self {
        match score {
            91..=100 => Self::Perfect,
            81..=90 => Self::Excellent,
            71..=80 => Self::Good,
            61..=70 => Self::Fair,
            51..=60 => Self::Caution,
            41..=50 => Self::Risky,
            31..=40 => Self::Degraded,
            21..=30 => Self::Failing,
            11..=20 => Self::Critical,
            _ => Self::Fatal,
        }
    }
}

impl SeverityBase5 {
    pub fn derive_from(score: u8) -> Self {
        match score {
            96..=100 => Self::Perfect,
            91..=95 => Self::NearPerfect,
            86..=90 => Self::Excellent,
            81..=85 => Self::Strong,
            76..=80 => Self::Stable,
            71..=75 => Self::Balanced,
            66..=70 => Self::Watchful,
            61..=65 => Self::Drifting,
            56..=60 => Self::Wavering,
            51..=55 => Self::Exposed,
            46..=50 => Self::Warning,
            41..=45 => Self::Tense,
            36..=40 => Self::Unstable,
            31..=35 => Self::Fragile,
            26..=30 => Self::Slipping,
            21..=25 => Self::Dangerous,
            16..=20 => Self::Severe,
            11..=15 => Self::Collapsing,
            6..=10 => Self::Critical,
            _ => Self::Fatal,
        }
    }
}

impl SeverityBase20 {
    pub fn derive_from(score: u8) -> Self {
        match score {
            81..=100 => Self::Perfect,
            61..=80 => Self::Stable,
            41..=60 => Self::Unstable,
            21..=40 => Self::Critical,
            _ => Self::Fatal,
        }
    }
}

impl SeverityBase25 {
    pub fn derive_from(score: u8) -> Self {
        match score {
            76..=100 => Self::AnchorPerfect,
            51..=75 => Self::AnchorStable,
            26..=50 => Self::AnchorFailing,
            _ => Self::AnchorFatal,
        }
    }
}

impl SeverityBase50 {
    pub fn derive_from(score: u8) -> Self {
        match score {
            51..=100 => Self::Pass,
            1..=50 => Self::Warning,
            _ => Self::Fail,
        }
    }
}
